/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ku6Sf4rtBvc4dQ1SyEoEgQ
// Component: CktnmCyKNbEc

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import ContentTitle from "../../ContentTitle"; // plasmic-import: jU6e8T6oRosp/component
import NewsCard from "../../NewsCard"; // plasmic-import: wmCnuxcQdxPB/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: ku6Sf4rtBvc4dQ1SyEoEgQ/projectcss
import sty from "./PlasmicContentMain.module.css"; // plasmic-import: CktnmCyKNbEc/css

createPlasmicElementProxy;

export type PlasmicContentMain__VariantMembers = {};
export type PlasmicContentMain__VariantsArgs = {};
type VariantPropType = keyof PlasmicContentMain__VariantsArgs;
export const PlasmicContentMain__VariantProps = new Array<VariantPropType>();

export type PlasmicContentMain__ArgsType = {};
type ArgPropType = keyof PlasmicContentMain__ArgsType;
export const PlasmicContentMain__ArgProps = new Array<ArgPropType>();

export type PlasmicContentMain__OverridesType = {
  root?: Flex__<"div">;
  contentTitle?: Flex__<typeof ContentTitle>;
  newsCard?: Flex__<typeof NewsCard>;
};

export interface DefaultContentMainProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicContentMain__RenderFunc(props: {
  variants: PlasmicContentMain__VariantsArgs;
  args: PlasmicContentMain__ArgsType;
  overrides: PlasmicContentMain__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__ui1Ts)}>
        <div
          className={classNames(projectcss.all, sty.freeBox__gnb7D)}
          loading={"lazy"}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__yfcLe
            )}
          >
            {"Project: Paint Killer"}
          </div>
        </div>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__whJzy)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__cr16P
          )}
        >
          <React.Fragment>
            <span
              className={"plasmic_default__all plasmic_default__span"}
              style={{ color: "#FFFFFF" }}
            >
              {"We are an indie game studio developing "}
            </span>
            <React.Fragment>{""}</React.Fragment>
            <span
              className={"plasmic_default__all plasmic_default__span"}
              style={{ color: "var(--token-c4GqJ_Pt1ean)", fontWeight: 700 }}
            >
              {"immersive 3D"}
            </span>
            <React.Fragment>{""}</React.Fragment>
            <span
              className={"plasmic_default__all plasmic_default__span"}
              style={{ color: "#FFFFFF" }}
            >
              {" games."}
            </span>
          </React.Fragment>
        </div>
        <ContentTitle
          data-plasmic-name={"contentTitle"}
          data-plasmic-override={overrides.contentTitle}
          className={classNames("__wab_instance", sty.contentTitle)}
          title={"Latest News"}
        />

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__w2DNe
          )}
        >
          {"Stay updated with our latest announcements and events"}
        </div>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__rbZl1)}>
        {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))([
          2, 3, 4
        ]).map((__plasmic_item_0, __plasmic_idx_0) => {
          const currentItem = __plasmic_item_0;
          const currentIndex = __plasmic_idx_0;
          return (
            <div
              className={classNames(projectcss.all, sty.freeBox__hlKTw)}
              key={currentIndex}
            >
              <NewsCard
                data-plasmic-name={"newsCard"}
                data-plasmic-override={overrides.newsCard}
                className={classNames("__wab_instance", sty.newsCard)}
                date={"Test123"}
                description={"Das ist eine Beschreibung"}
                title={"Titel"}
                url={`/`}
              />
            </div>
          );
        })}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "contentTitle", "newsCard"],
  contentTitle: ["contentTitle"],
  newsCard: ["newsCard"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  contentTitle: typeof ContentTitle;
  newsCard: typeof NewsCard;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicContentMain__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicContentMain__VariantsArgs;
    args?: PlasmicContentMain__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicContentMain__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicContentMain__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicContentMain__ArgProps,
          internalVariantPropNames: PlasmicContentMain__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicContentMain__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicContentMain";
  } else {
    func.displayName = `PlasmicContentMain.${nodeName}`;
  }
  return func;
}

export const PlasmicContentMain = Object.assign(
  // Top-level PlasmicContentMain renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    contentTitle: makeNodeComponent("contentTitle"),
    newsCard: makeNodeComponent("newsCard"),

    // Metadata about props expected for PlasmicContentMain
    internalVariantProps: PlasmicContentMain__VariantProps,
    internalArgProps: PlasmicContentMain__ArgProps
  }
);

export default PlasmicContentMain;
/* prettier-ignore-end */
