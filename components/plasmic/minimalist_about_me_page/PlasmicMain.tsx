/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ku6Sf4rtBvc4dQ1SyEoEgQ
// Component: wtClp25O9srL

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import MainHeaderAndFooter from "../../MainHeaderAndFooter"; // plasmic-import: yCiCJZvN81Fx/component
import ContentTitle from "../../ContentTitle"; // plasmic-import: jU6e8T6oRosp/component
import NewsCard from "../../NewsCard"; // plasmic-import: wmCnuxcQdxPB/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: ku6Sf4rtBvc4dQ1SyEoEgQ/projectcss
import sty from "./PlasmicMain.module.css"; // plasmic-import: wtClp25O9srL/css

createPlasmicElementProxy;

export type PlasmicMain__VariantMembers = {};
export type PlasmicMain__VariantsArgs = {};
type VariantPropType = keyof PlasmicMain__VariantsArgs;
export const PlasmicMain__VariantProps = new Array<VariantPropType>();

export type PlasmicMain__ArgsType = {};
type ArgPropType = keyof PlasmicMain__ArgsType;
export const PlasmicMain__ArgProps = new Array<ArgPropType>();

export type PlasmicMain__OverridesType = {
  root?: Flex__<"div">;
  mainHeaderAndFooter?: Flex__<typeof MainHeaderAndFooter>;
  contentTitle?: Flex__<typeof ContentTitle>;
  newsCard?: Flex__<typeof NewsCard>;
};

export interface DefaultMainProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMain__RenderFunc(props: {
  variants: PlasmicMain__VariantsArgs;
  args: PlasmicMain__ArgsType;
  overrides: PlasmicMain__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <MainHeaderAndFooter
            data-plasmic-name={"mainHeaderAndFooter"}
            data-plasmic-override={overrides.mainHeaderAndFooter}
            className={classNames("__wab_instance", sty.mainHeaderAndFooter)}
            content={
              <div className={classNames(projectcss.all, sty.freeBox__e88Kd)}>
                <div className={classNames(projectcss.all, sty.freeBox__puvUv)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ie5Z)}
                    loading={"lazy"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ewtWx
                      )}
                    >
                      {"Never Stop Drawing"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__m7Gsh
                      )}
                    >
                      {"Check out our current project!"}
                    </div>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__or94U)}>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__jYejS)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ntZFp
                      )}
                    >
                      {"Fun 3D games!"}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__zVe8V
                      )}
                    >
                      {"Serious three-dimensional games."}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___9Zg1U
                      )}
                    >
                      {"atricas"}
                    </div>
                  </Stack__>
                  <ContentTitle
                    data-plasmic-name={"contentTitle"}
                    data-plasmic-override={overrides.contentTitle}
                    className={classNames("__wab_instance", sty.contentTitle)}
                    title={"Latest News"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__sNk9
                    )}
                  >
                    {"Stay updated with our latest announcements and events"}
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__wA1BO)}>
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    [2, 3, 4]
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___697Ip
                        )}
                        key={currentIndex}
                      >
                        <NewsCard
                          data-plasmic-name={"newsCard"}
                          data-plasmic-override={overrides.newsCard}
                          className={classNames("__wab_instance", sty.newsCard)}
                          date={"Test123"}
                          description={"Das ist eine Beschreibung"}
                          title={"Titel"}
                          url={`/`}
                        />
                      </div>
                    );
                  })}
                </div>
              </div>
            }
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "mainHeaderAndFooter", "contentTitle", "newsCard"],
  mainHeaderAndFooter: ["mainHeaderAndFooter", "contentTitle", "newsCard"],
  contentTitle: ["contentTitle"],
  newsCard: ["newsCard"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  mainHeaderAndFooter: typeof MainHeaderAndFooter;
  contentTitle: typeof ContentTitle;
  newsCard: typeof NewsCard;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMain__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMain__VariantsArgs;
    args?: PlasmicMain__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMain__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMain__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMain__ArgProps,
          internalVariantPropNames: PlasmicMain__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMain__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMain";
  } else {
    func.displayName = `PlasmicMain.${nodeName}`;
  }
  return func;
}

export const PlasmicMain = Object.assign(
  // Top-level PlasmicMain renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    mainHeaderAndFooter: makeNodeComponent("mainHeaderAndFooter"),
    contentTitle: makeNodeComponent("contentTitle"),
    newsCard: makeNodeComponent("newsCard"),

    // Metadata about props expected for PlasmicMain
    internalVariantProps: PlasmicMain__VariantProps,
    internalArgProps: PlasmicMain__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicMain;
/* prettier-ignore-end */
