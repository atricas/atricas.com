/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ku6Sf4rtBvc4dQ1SyEoEgQ
// Component: yCiCJZvN81Fx

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: ku6Sf4rtBvc4dQ1SyEoEgQ/projectcss
import sty from "./PlasmicMainHeaderAndFooter.module.css"; // plasmic-import: yCiCJZvN81Fx/css

createPlasmicElementProxy;

export type PlasmicMainHeaderAndFooter__VariantMembers = {};
export type PlasmicMainHeaderAndFooter__VariantsArgs = {};
type VariantPropType = keyof PlasmicMainHeaderAndFooter__VariantsArgs;
export const PlasmicMainHeaderAndFooter__VariantProps =
  new Array<VariantPropType>();

export type PlasmicMainHeaderAndFooter__ArgsType = {
  content?: React.ReactNode;
};
type ArgPropType = keyof PlasmicMainHeaderAndFooter__ArgsType;
export const PlasmicMainHeaderAndFooter__ArgProps = new Array<ArgPropType>(
  "content"
);

export type PlasmicMainHeaderAndFooter__OverridesType = {
  root?: Flex__<"div">;
  header?: Flex__<"div">;
  atricasIcon?: Flex__<typeof PlasmicImg__>;
  choices?: Flex__<"div">;
  footer?: Flex__<"div">;
  games?: Flex__<"div">;
};

export interface DefaultMainHeaderAndFooterProps {
  content?: React.ReactNode;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMainHeaderAndFooter__RenderFunc(props: {
  variants: PlasmicMainHeaderAndFooter__VariantsArgs;
  args: PlasmicMainHeaderAndFooter__ArgsType;
  overrides: PlasmicMainHeaderAndFooter__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"header"}
        data-plasmic-override={overrides.header}
        className={classNames(projectcss.all, sty.header)}
      >
        <PlasmicImg__
          data-plasmic-name={"atricasIcon"}
          data-plasmic-override={overrides.atricasIcon}
          alt={""}
          className={classNames(sty.atricasIcon)}
          displayHeight={"100%"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"auto"}
          loading={"lazy"}
          src={{
            src: "/plasmic/minimalist_about_me_page/images/logoPng.png",
            fullWidth: 4096,
            fullHeight: 4096,
            aspectRatio: undefined
          }}
        />

        <div
          data-plasmic-name={"choices"}
          data-plasmic-override={overrides.choices}
          className={classNames(projectcss.all, sty.choices)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__vkfa4)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__eky8Z
              )}
            >
              {"Games"}
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__mpQHa)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__sJLpB
              )}
            >
              {"News"}
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox___6RUy5)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___8Ocnk
              )}
            >
              {"Team"}
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox___7Po90)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__loasy
              )}
            >
              {"Merch"}
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__edHk)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__o1Sa
              )}
            >
              {"Press"}
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__u9Xet)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__icWvp
              )}
            >
              {"Contact"}
            </div>
          </div>
        </div>
      </div>
      {renderPlasmicSlot({
        defaultContents: (
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__vXqe
            )}
          >
            {"Example Content"}
          </div>
        ),
        value: args.content
      })}
      <div
        data-plasmic-name={"footer"}
        data-plasmic-override={overrides.footer}
        className={classNames(projectcss.all, sty.footer)}
      >
        <div
          data-plasmic-name={"games"}
          data-plasmic-override={overrides.games}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.games
          )}
        >
          {
            "                                                                                                                                                                       "
          }
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__cGoD5)}>
          <div className={classNames(projectcss.all, sty.freeBox__npA4A)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__sytpr
              )}
            >
              {"Logo"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__tftdb
              )}
            >
              {
                "Creating immersive gaming experiences that push the boundaries of creativity and innovation."
              }
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___87E6W
              )}
            >
              {"Social media logos"}
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox___3FQHa)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__eiMuH
              )}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {"Quick links"}
                </span>
              </React.Fragment>
            </div>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__uzHcD
              )}
              component={Link}
              href={"https://www.plasmic.app/"}
              platform={"nextjs"}
            >
              {"Games"}
            </PlasmicLink__>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__yaY2
              )}
              component={Link}
              href={"https://www.plasmic.app/"}
              platform={"nextjs"}
            >
              {"News"}
            </PlasmicLink__>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__e0IK5
              )}
              component={Link}
              href={"https://www.plasmic.app/"}
              platform={"nextjs"}
            >
              {"About Us"}
            </PlasmicLink__>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__iNf3
              )}
              component={Link}
              href={"https://www.plasmic.app/"}
              platform={"nextjs"}
            >
              {"Careers"}
            </PlasmicLink__>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__k9TSy
              )}
              component={Link}
              href={"https://www.plasmic.app/"}
              platform={"nextjs"}
            >
              {"Press Kit"}
            </PlasmicLink__>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__tHDc8)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__pqjif
              )}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {"Games"}
                </span>
              </React.Fragment>
            </div>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__ws4GF
              )}
              component={Link}
              href={"https://www.plasmic.app/"}
              platform={"nextjs"}
            >
              {"Never Stop Drawing"}
            </PlasmicLink__>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__wwDiM
              )}
              component={Link}
              href={"https://www.plasmic.app/"}
              platform={"nextjs"}
            >
              {"Upcoming Projects"}
            </PlasmicLink__>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox___5IbWd)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ip2O3
              )}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {"Contact"}
                </span>
              </React.Fragment>
            </div>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__o8Syl
              )}
              component={Link}
              href={"https://www.plasmic.app/"}
              platform={"nextjs"}
            >
              {"Berlin, Germany"}
            </PlasmicLink__>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__jur1U
              )}
              component={Link}
              href={"https://www.plasmic.app/"}
              platform={"nextjs"}
            >
              {"hi@atricas.com"}
            </PlasmicLink__>
          </div>
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__htGet
          )}
        >
          {
            "                                                                                                                                                                       "
          }
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__fZzvV)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__rWtt4
            )}
          >
            {"(c) 2025 atricas. All rights reserved."}
          </div>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__jc0Fo)}
          >
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__klmav
              )}
              component={Link}
              href={"https://www.plasmic.app/"}
              platform={"nextjs"}
            >
              {"Privacy Policy"}
            </PlasmicLink__>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__dqSPd
              )}
              component={Link}
              href={"https://www.plasmic.app/"}
              platform={"nextjs"}
            >
              {"Terms of Service"}
            </PlasmicLink__>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__dApGe
              )}
              component={Link}
              href={"https://www.plasmic.app/"}
              platform={"nextjs"}
            >
              {"Cookie Policy"}
            </PlasmicLink__>
          </Stack__>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "header", "atricasIcon", "choices", "footer", "games"],
  header: ["header", "atricasIcon", "choices"],
  atricasIcon: ["atricasIcon"],
  choices: ["choices"],
  footer: ["footer", "games"],
  games: ["games"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: "div";
  atricasIcon: typeof PlasmicImg__;
  choices: "div";
  footer: "div";
  games: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMainHeaderAndFooter__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMainHeaderAndFooter__VariantsArgs;
    args?: PlasmicMainHeaderAndFooter__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMainHeaderAndFooter__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMainHeaderAndFooter__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMainHeaderAndFooter__ArgProps,
          internalVariantPropNames: PlasmicMainHeaderAndFooter__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMainHeaderAndFooter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMainHeaderAndFooter";
  } else {
    func.displayName = `PlasmicMainHeaderAndFooter.${nodeName}`;
  }
  return func;
}

export const PlasmicMainHeaderAndFooter = Object.assign(
  // Top-level PlasmicMainHeaderAndFooter renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    atricasIcon: makeNodeComponent("atricasIcon"),
    choices: makeNodeComponent("choices"),
    footer: makeNodeComponent("footer"),
    games: makeNodeComponent("games"),

    // Metadata about props expected for PlasmicMainHeaderAndFooter
    internalVariantProps: PlasmicMainHeaderAndFooter__VariantProps,
    internalArgProps: PlasmicMainHeaderAndFooter__ArgProps
  }
);

export default PlasmicMainHeaderAndFooter;
/* prettier-ignore-end */
